import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import find_dotenv, load_dotenv


def run_bot():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler("bot.log"),
            logging.StreamHandler()
        ]
    )
    logger = logging.getLogger(__name__)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
    load_dotenv(find_dotenv())
    TOKEN = os.getenv("TOKEN")

    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        exit(1)

    bot = Bot(token=TOKEN)
    dp = Dispatcher()

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    @dp.message(Command('start'))
    async def cmd_start(message: types.Message):
        try:
            user_name = message.from_user.first_name
            user_id = message.from_user.id
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

            welcome_text = (
                f"üî¢ –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø ‚Äî –±–æ—Ç-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä. üßÆ\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2+2', '5*3' –∏–ª–∏ '10/2'), "
                "–∏ —è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —Ä–µ—à—É –µ–≥–æ! üòä\n\n"
            )
            await message.answer(welcome_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}", exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    @dp.message()
    async def calculate(message: Message):
        try:
            user_id = message.from_user.id
            expression = message.text
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {expression}")

            expression = expression.replace("^", "**")  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–µ–ø–µ–Ω–µ–π
            result = eval(expression)  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ (–æ–ø–∞—Å–Ω–æ –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏!)

            logger.info(f"–í—ã—á–∏—Å–ª–µ–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {expression} = {result}")
            await message.answer(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        except ZeroDivisionError:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å: {expression} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {expression} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}): {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä: '2+2' –∏–ª–∏ '5*3'")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    dp.run_polling(bot)


# –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == '__main__':
    run_bot()
