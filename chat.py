import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import find_dotenv, load_dotenv


load_dotenv(find_dotenv())
TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()


@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    user_name = message.from_user.first_name
    welcome_text = (
        f"üî¢ –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø ‚Äî –±–æ—Ç-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä. üßÆ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2+2', '5*3' –∏–ª–∏ '10/2'), "
        "–∏ —è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —Ä–µ—à—É –µ–≥–æ! üòä\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ 15 + 7\n"
        "‚Ä¢ 20 / 4\n"
        "‚Ä¢ 3^3 (—ç—Ç–æ 3 –≤ —Å—Ç–µ–ø–µ–Ω–∏ 3)"
    )
    await message.answer(welcome_text)


@dp.message()
async def calculate(message: Message):
    try:
        expression = message.text
        expression = expression.replace("^", "**")  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–µ–ø–µ–Ω–µ–π
        result = eval(expression)  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ (–æ–ø–∞—Å–Ω–æ –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏!)
        await message.answer(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except ZeroDivisionError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä: '2+2' –∏–ª–∏ '5*3'")

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")
    dp.run_polling(bot)
