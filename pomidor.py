import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import find_dotenv, load_dotenv
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Loguru
logger.add(
    "spy_bot.log", 
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
    level="INFO",
    rotation="10 MB",  # –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 10 –ú–ë
    compression="zip",  # –°–∂–∞—Ç–∏–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
    backtrace=True,  # –î–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫
    diagnose=True  # –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
load_dotenv(find_dotenv())
TOKEN = os.getenv("TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
    exit(1)

if not ADMIN_ID:
    logger.warning("ADMIN_ID –Ω–µ —É–∫–∞–∑–∞–Ω, –±–æ—Ç –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")

bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message()
async def spy_on_user(message: Message):
    try:
        user = message.from_user
        log_data = {
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "user_id": user.id,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "username": user.username,
            "text": message.text,
            "chat_id": message.chat.id,
            "message_id": message.message_id
        }

        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(
            "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {first_name} (ID: {user_id}): {text}",
            **log_data
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ ADMIN_ID —É–∫–∞–∑–∞–Ω)
        if ADMIN_ID:
            try:
                await bot.send_message(
                    ADMIN_ID,
                    f"üïµÔ∏è‚Äç‚ôÇÔ∏è *–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n"
                    f"‚ñ´Ô∏è *ID:* `{user.id}`\n"
                    f"‚ñ´Ô∏è *–ò–º—è:* {user.first_name}\n"
                    f"‚ñ´Ô∏è *–§–∞–º–∏–ª–∏—è:* {user.last_name}\n"
                    f"‚ñ´Ô∏è *Username:* @{user.username}\n"
                    f"‚ñ´Ô∏è *–¢–µ–∫—Å—Ç:* `{message.text}`\n"
                    f"‚ñ´Ô∏è *–í—Ä–µ–º—è:* {log_data['date']}",
                    parse_mode="Markdown"
                )
                logger.success(f"–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω—É (ID: {ADMIN_ID})")
            except Exception as admin_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {admin_error}")

    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ spy_on_user: {e}")

if __name__ == '__main__':
    logger.info("üîÑ –®–ø–∏–æ–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        dp.run_polling(bot)
    except Exception as poll_error:
        logger.critical(f"–ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {poll_error}")
    finally:
        logger.info("‚èπ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
